name: CI (Linux & Windows)

on:
  push:
    branches: [ "**" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build

      - name: Install deps (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: choco install ninja -y --no-progress

      - name: CCache CMake
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-cmake

      - name: Configure (Release, Ninja)
        run: cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --parallel

      - name: Package (CPack)
        run: cmake --build build --parallel --target package

      - name: Smoke test (Linux)
        if: runner.os == 'Linux'
        run: |
          if [ -x build/bulk ]; then printf "cmd1\ncmd2\ncmd3\n" | build/bulk 3 || true; fi
          if [ -x build/bulk_server ]; then printf "cmd1\ncmd2\ncmd3\n" | build/bulk_server || true; fi

      - name: Smoke test (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          if (Test-Path build/bulk.exe) {
            "cmd1`ncmd2`ncmd3`n" | & build/bulk.exe 3
            if ($LASTEXITCODE -ne 0) { Write-Host "bulk exited $LASTEXITCODE (ignored)"; $global:LASTEXITCODE = 0 }
          }
          if (Test-Path build/bulk_server.exe) {
            "cmd1`ncmd2`ncmd3`n" | & build/bulk_server.exe
            if ($LASTEXITCODE -ne 0) { Write-Host "bulk_server exited $LASTEXITCODE (ignored)"; $global:LASTEXITCODE = 0 }
          }

      - name: Upload artifacts (packages)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-packages
          path: |
            build/*.tar.gz
            build/*.zip
          if-no-files-found: error

  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download Linux packages
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-packages
          path: dist/linux

      - name: Download Windows packages
        uses: actions/download-artifact@v4
        with:
          name: windows-latest-packages
          path: dist/windows

      - name: Publish Release (archives)
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: |
            dist/linux/*.tar.gz
            dist/linux/*.zip
            dist/windows/*.zip
